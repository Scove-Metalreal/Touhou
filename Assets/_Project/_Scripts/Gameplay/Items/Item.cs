// FILE: _Project/_Scripts/Gameplay/Items/Item.cs (PHI√äN B·∫¢N C√ì T·ª∞ H·ª¶Y KHI RA KH·ªéI M√ÄN H√åNH)

using _Project._Scripts.Player;
using UnityEngine;

namespace _Project._Scripts.Gameplay.Items
{
    public enum ItemType { Health, Power, Point, Bomb, Upgrade }

    [RequireComponent(typeof(SpriteRenderer))] // ƒê·∫£m b·∫£o c√≥ SpriteRenderer ƒë·ªÉ OnBecameInvisible ho·∫°t ƒë·ªông
    public class Item : MonoBehaviour
    {
        [Header("‚öôÔ∏è Thi·∫øt l·∫≠p V·∫≠t ph·∫©m")]
        [Tooltip("Ch·ªçn lo·∫°i cho v·∫≠t ph·∫©m n√†y.")]
        public ItemType itemType;
        
        [Tooltip("Gi√° tr·ªã s·ªë c·ªßa v·∫≠t ph·∫©m.")]
        public int value;

        [Tooltip("ƒê√°nh d·∫•u n·∫øu ƒë√¢y l√† v·∫≠t ph·∫©m quan tr·ªçng r∆°i ra t·ª´ Boss v√† kh√¥ng n√™n t·ª± h·ªßy.")]
        public bool isGuaranteedLoot = false;

        [Space(10)]
        [Header("üöÄ H√†nh vi Di chuy·ªÉn")]
        [Tooltip("T·ªëc ƒë·ªô v·∫≠t ph·∫©m b·ªã h√∫t v·ªÅ ph√≠a ng∆∞·ªùi ch∆°i.")]
        public float homingSpeed = 8f;
        [Tooltip("T·ªëc ƒë·ªô r∆°i ban ƒë·∫ßu c·ªßa v·∫≠t ph·∫©m.")]
        [SerializeField] private float initialFallSpeed = 2f;

        [Space(10)]
        [Header("üóëÔ∏è T·ª± ƒë·ªông d·ªçn d·∫πp")]
        [Tooltip("Th·ªùi gian t·ªìn t·∫°i c·ªßa v·∫≠t ph·∫©m (gi√¢y). Sau th·ªùi gian n√†y v·∫≠t ph·∫©m s·∫Ω t·ª± h·ªßy n·∫øu kh√¥ng ph·∫£i l√† 'Guaranteed Loot'.")]
        [SerializeField] private float lifetime = 10f;
        
        private Transform playerTarget;
        private bool isHoming = false;

        void Start()
        {
            // H·∫πn gi·ªù h·ªßy theo th·ªùi gian
            // Ch·ªâ √°p d·ª•ng cho c√°c v·∫≠t ph·∫©m kh√¥ng ph·∫£i l√† loot quan tr·ªçng.
            if (!isGuaranteedLoot)
            {
                Destroy(gameObject, lifetime);
            }
        }

        void Update()
        {
            if (isHoming && playerTarget != null)
            {
                // Di chuy·ªÉn v·ªÅ ph√≠a m·ª•c ti√™u khi ƒë∆∞·ª£c h√∫t
                transform.position = Vector2.MoveTowards(transform.position, playerTarget.position, homingSpeed * Time.deltaTime);
            }
            else if (!isHoming)
            {
                // R∆°i xu·ªëng t·ª´ t·ª´ n·∫øu ch∆∞a b·ªã h√∫t
                transform.Translate(Vector2.down * initialFallSpeed * Time.deltaTime);
            }
        }

        // --- TH√äM L·∫†I H√ÄM N√ÄY ---
        /// <summary>
        /// ƒê∆∞·ª£c Unity t·ª± ƒë·ªông g·ªçi khi ƒë·ªëi t∆∞·ª£ng kh√¥ng c√≤n ƒë∆∞·ª£c b·∫•t k·ª≥ camera n√†o nh√¨n th·∫•y.
        /// </summary>
        void OnBecameInvisible()
        {
            Destroy(gameObject);
        }
        // --- K·∫æT TH√öC PH·∫¶N TH√äM M·ªöI ---

        /// <summary>
        /// B·∫Øt ƒë·∫ßu di chuy·ªÉn v·ªÅ ph√≠a m·ª•c ti√™u (ng∆∞·ªùi ch∆°i).
        /// ƒê∆∞·ª£c g·ªçi b·ªüi ItemCollectionHandler.
        /// </summary>
        public void StartHoming(Transform target)
        {
            if (isHoming) return;
            isHoming = true;
            playerTarget = target;
        }

        /// <summary>
        /// √Åp d·ª•ng hi·ªáu ·ª©ng c·ªßa v·∫≠t ph·∫©m l√™n ng∆∞·ªùi ch∆°i v√† sau ƒë√≥ t·ª± h·ªßy.
        /// H√†m n√†y ƒë∆∞·ª£c PlayerCollision g·ªçi.
        /// </summary>
        public void Collect(PlayerState player)
        {
            if (player == null) return;

            switch (itemType)
            {
                case ItemType.Health:
                    player.Heal(value);
                    break;
                case ItemType.Power:
                    player.AddPower((float)value / 100f); 
                    break;
                case ItemType.Point:
                    player.AddScore(value);
                    break;
                case ItemType.Bomb:
                    player.AddBomb(value); 
                    break;
                case ItemType.Upgrade:
                    player.LevelUp();
                    break;
            }
            
            // H·ªßy GameObject ngay l·∫≠p t·ª©c sau khi ƒë√£ √°p d·ª•ng hi·ªáu ·ª©ng.
            Destroy(gameObject);
        }
    }
}