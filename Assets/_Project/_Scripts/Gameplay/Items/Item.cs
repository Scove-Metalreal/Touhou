// FILE: _Project/_Scripts/Gameplay/Items/Item.cs (VERSION 4.0 - AUTO LEVEL UP)

using _Project._Scripts.Player;
using UnityEngine;

namespace _Project._Scripts.Gameplay.Items
{
    public enum ItemType { Health, Power, Point, Bomb, Upgrade }

    public class Item : MonoBehaviour
    {
        [Header("‚öôÔ∏è Thi·∫øt l·∫≠p V·∫≠t ph·∫©m")]
        [Tooltip("Ch·ªçn lo·∫°i cho v·∫≠t ph·∫©m n√†y. Lo·∫°i s·∫Ω quy·∫øt ƒë·ªãnh h√†nh ƒë·ªông khi ng∆∞·ªùi ch∆°i nh·∫∑t.")]
        public ItemType itemType;
        
        [Tooltip("Gi√° tr·ªã s·ªë c·ªßa v·∫≠t ph·∫©m (v√≠ d·ª•: l∆∞·ª£ng m√°u h·ªìi, ƒëi·ªÉm s·ªë, s·ª©c m·∫°nh).")]
        public int value;

        // GHI CH√ö: Bi·∫øn 'upgradeData' ƒë√£ ƒë∆∞·ª£c x√≥a b·ªè v√¨ kh√¥ng c√≤n c·∫ßn thi·∫øt.

        [Space(10)]
        [Header("üöÄ H√†nh vi Di chuy·ªÉn")]
        [Tooltip("T·ªëc ƒë·ªô v·∫≠t ph·∫©m b·ªã h√∫t v·ªÅ ph√≠a ng∆∞·ªùi ch∆°i khi ·ªü trong t·∫ßm thu th·∫≠p.")]
        public float homingSpeed = 8f;
        
        private Transform playerTarget;
        private bool isHoming = false;

        void Update()
        {
            if (isHoming && playerTarget != null)
            {
                transform.position = Vector2.MoveTowards(transform.position, playerTarget.position, homingSpeed * Time.deltaTime);
            }
        }

        public void StartHoming(Transform target)
        {
            isHoming = true;
            playerTarget = target;
        }

        void OnTriggerEnter2D(Collider2D other)
        {
            if (other.CompareTag("Player"))
            {
                PlayerState playerState = other.GetComponent<PlayerState>();
                if (playerState != null)
                {
                    Collect(playerState);
                    Destroy(gameObject); 
                }
            }
        }
        
        private void Collect(PlayerState player)
        {
            switch (itemType)
            {
                case ItemType.Health:
                    player.Heal(value);
                    break;
                    
                case ItemType.Power:
                    player.AddPower((float)value / 100f); 
                    break;
                    
                case ItemType.Point:
                    player.AddScore(value);
                    break;
                    
                case ItemType.Bomb:
                    player.AddBomb(value); 
                    break;
                    
                case ItemType.Upgrade:
                    // C·∫¨P NH·∫¨T QUAN TR·ªåNG:
                    // Thay v√¨ truy·ªÅn m·ªôt data c·ª• th·ªÉ, ch√∫ng ta ch·ªâ c·∫ßn ra l·ªánh cho PlayerState t·ª± l√™n c·∫•p.
                    player.LevelUp();
                    break;
            }
        }
    }
}
