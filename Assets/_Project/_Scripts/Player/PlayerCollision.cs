// FILE: _Project/_Scripts/Player/PlayerCollision.cs (VERSION 3.0 - FULLY COMPATIBLE)

using _Project._Scripts.Gameplay.Items;
using _Project._Scripts.Gameplay.Projectiles;
using UnityEngine;

namespace _Project._Scripts.Player
{
    /// <summary>
    /// X·ª≠ l√Ω c√°c s·ª± ki·ªán va ch·∫°m v·∫≠t l√Ω cho ng∆∞·ªùi ch∆°i.
    /// Script n√†y ch·ªãu tr√°ch nhi·ªám ph√°t hi·ªán va ch·∫°m v·ªõi ƒë·∫°n ƒë·ªãch ho·∫∑c v·∫≠t ph·∫©m,
    /// sau ƒë√≥ th√¥ng b√°o cho PlayerState ƒë·ªÉ x·ª≠ l√Ω logic t∆∞∆°ng ·ª©ng.
    /// N√≥ c≈©ng qu·∫£n l√Ω c√°c hi·ªáu ·ª©ng h√¨nh ·∫£nh v√† √¢m thanh li√™n quan ƒë·∫øn va ch·∫°m v√† c√°i ch·∫øt.
    /// </summary>
    [RequireComponent(typeof(AudioSource))]
    public class PlayerCollision : MonoBehaviour
    {
        // =============================================================================================
        // SECTION: KHAI B√ÅO BI·∫æN & THAM CHI·∫æU (VARIABLES & REFERENCES)
        // =============================================================================================

        [Header("üß© Tham chi·∫øu Component (Component References)")]
        [Tooltip("K√©o ch√≠nh ƒë·ªëi t∆∞·ª£ng Player (GameObject ch·ª©a script PlayerState) v√†o ƒë√¢y.")]
        [SerializeField] private PlayerState playerState;

        [Space(10)]

        [Header("üí• Hi·ªáu ·ª©ng & √Çm thanh (Effects & Sounds)")]
        [Tooltip("√Çm thanh s·∫Ω ph√°t khi ng∆∞·ªùi ch∆°i b·ªã tr√∫ng ƒë·∫°n.")]
        [SerializeField] private AudioClip hitSFX; // ƒê·ªïi t√™n t·ª´ deathSFX ƒë·ªÉ r√µ nghƒ©a h∆°n

        [Tooltip("Prefab hi·ªáu ·ª©ng n·ªï s·∫Ω xu·∫•t hi·ªán khi m√°u ng∆∞·ªùi ch∆°i v·ªÅ 0.")]
        [SerializeField] private GameObject deathVFX;

        [Space(10)]
        [Header("‚ú® Hi·ªáu ·ª©ng Graze (S∆∞·ª£t ƒë·∫°n)")]
        [Tooltip("Prefab hi·ªáu ·ª©ng s·∫Ω xu·∫•t hi·ªán khi ƒë·∫°n ƒë·ªãch bay s∆∞·ª£t qua ng∆∞·ªùi ch∆°i.")]
        [SerializeField] private GameObject grazeVFX;

        [Tooltip("√Çm thanh s·∫Ω ph√°t khi ng∆∞·ªùi ch∆°i graze th√†nh c√¥ng.")]
        [SerializeField] private AudioClip grazeSFX;
    
        // --- Bi·∫øn n·ªôi b·ªô (private) ---
        private AudioSource audioSource; // D√πng ƒë·ªÉ ph√°t √¢m thanh

        // =============================================================================================
        // SECTION: V√íNG ƒê·ªúI UNITY & S·ª∞ KI·ªÜN (UNITY LIFECYCLE & EVENTS)
        // =============================================================================================

        void Awake()
        {
            // T·ª± ƒë·ªông l·∫•y component AudioSource ƒë·ªÉ ph√°t √¢m thanh.
            audioSource = GetComponent<AudioSource>();
            if (audioSource == null)
            {
                audioSource = gameObject.AddComponent<AudioSource>();
            }
        }
        
        // ƒêƒÉng k√Ω l·∫Øng nghe s·ª± ki·ªán khi script ƒë∆∞·ª£c k√≠ch ho·∫°t
        void OnEnable()
        {
            PlayerState.OnPlayerDied += HandlePlayerDeath;
        }

        // H·ªßy ƒëƒÉng k√Ω ƒë·ªÉ tr√°nh l·ªói khi ƒë·ªëi t∆∞·ª£ng b·ªã ph√° h·ªßy
        void OnDisable()
        {
            PlayerState.OnPlayerDied -= HandlePlayerDeath;
        }

        /// <summary>
        /// ƒê∆∞·ª£c g·ªçi b·ªüi Unity m·ªói khi m·ªôt Collider2D kh√°c ƒëi v√†o trigger c·ªßa ƒë·ªëi t∆∞·ª£ng n√†y.
        /// </summary>
        void OnTriggerEnter2D(Collider2D other)
        {
            // --- X·ª¨ L√ù VA CH·∫†M V·ªöI ƒê·∫†N ƒê·ªäCH ---
            if (other.CompareTag("EnemyBullet"))
            {
                Bullet bullet = other.GetComponent<Bullet>();
                if (bullet != null)
                {
                    // G·ªçi h√†m x·ª≠ l√Ω va ch·∫°m v√† truy·ªÅn v√†o l∆∞·ª£ng s√°t th∆∞∆°ng c·ªßa vi√™n ƒë·∫°n
                    HandleHit(bullet.Damage);
                }
                
                // Tr·∫£ vi√™n ƒë·∫°n v·ªÅ Object Pooler
                other.gameObject.SetActive(false);
            }

            // --- X·ª¨ L√ù VA CH·∫†M V·ªöI V·∫¨T PH·∫®M ---
            if (other.CompareTag("Item"))
            {
                Item item = other.GetComponent<Item>();
                if (item != null)
                {
                    // Ra l·ªánh cho v·∫≠t ph·∫©m √°p d·ª•ng hi·ªáu ·ª©ng v√† t·ª± h·ªßy
                    item.Collect(playerState); 
                }
            }
        }

        // =============================================================================================
        // SECTION: H√ÄM X·ª¨ L√ù LOGIC (LOGIC HANDLERS)
        // =============================================================================================

        /// <summary>
        /// X·ª≠ l√Ω logic khi ng∆∞·ªùi ch∆°i b·ªã tr√∫ng ƒë·∫°n (nh∆∞ng ch∆∞a ch·∫Øc ƒë√£ ch·∫øt).
        /// </summary>
        private void HandleHit(int damageAmount)
        {
            if (playerState.IsInvincible) return;

            // Ph√°t √¢m thanh b·ªã tr√∫ng ƒë·∫°n
            if (hitSFX != null && audioSource != null)
            {
                audioSource.PlayOneShot(hitSFX);
            }

            // Ra l·ªánh cho PlayerState nh·∫≠n s√°t th∆∞∆°ng.
            playerState.TakeDamage(damageAmount);
        }

        /// <summary>
        /// H√†m n√†y ƒë∆∞·ª£c g·ªçi b·ªüi s·ª± ki·ªán OnPlayerDied t·ª´ PlayerState khi m√°u v·ªÅ 0.
        /// Ch·ªãu tr√°ch nhi·ªám cho hi·ªáu ·ª©ng ch·∫øt.
        /// </summary>
        private void HandlePlayerDeath()
        {
            // K√≠ch ho·∫°t hi·ªáu ·ª©ng n·ªï khi ch·∫øt
            if (deathVFX != null)
            {
                Instantiate(deathVFX, transform.position, Quaternion.identity);
            }
            // Logic c√≤n l·∫°i (·∫©n player, hi·ªán m√†n h√¨nh game over...) ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü PlayerState v√† GameManager.
        }

        /// <summary>
        /// X·ª≠ l√Ω khi ƒë·∫°n ƒë·ªãch bay s∆∞·ª£t qua (ƒë∆∞·ª£c g·ªçi t·ª´ m·ªôt collider ri√™ng cho graze).
        /// </summary>
        public void HandleGraze(GameObject bullet)
        {
            // T·∫°o hi·ªáu ·ª©ng v√† √¢m thanh graze.
            if (grazeVFX != null)
            {
                Instantiate(grazeVFX, bullet.transform.position, Quaternion.identity);
            }
            if (grazeSFX != null && audioSource != null)
            {
                audioSource.PlayOneShot(grazeSFX);
            }
        
            // Th√™m ƒëi·ªÉm ho·∫∑c power cho ng∆∞·ªùi ch∆°i (logic n√†y c√≥ th·ªÉ n·∫±m trong PlayerState)
            playerState.AddScore(50); // V√≠ d·ª•: th√™m 50 ƒëi·ªÉm cho m·ªói l·∫ßn graze
            Debug.Log("Graze!");
        }
    }
}

