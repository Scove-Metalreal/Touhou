// FILE: _Project/_Scripts/Player/PlayerState.cs (VERSION 6.0 - AUTO LEVEL UP)

using UnityEngine;
using System;
using System.Collections.Generic;
using _Project._Scripts.Core;
using _Project._Scripts.UI;

namespace _Project._Scripts.Player
{
    [RequireComponent(typeof(PlayerShooting), typeof(PlayerSkillManager), typeof(PlayerController))]
    public class PlayerState : MonoBehaviour
    {
        [Header("üìà H·ªá th·ªëng N√¢ng c·∫•p (Upgrade System)")]
        [Tooltip("K√©o ScriptableObject 'PlayerUpgradePath' ch·ª©a to√†n b·ªô chu·ªói n√¢ng c·∫•p v√†o ƒë√¢y.")]
        [SerializeField] private PlayerUpgradePath upgradePath;
        
        // Bi·∫øn n·ªôi b·ªô ƒë·ªÉ theo d√µi c·∫•p ƒë·ªô hi·ªán t·∫°i
        private int currentUpgradeLevel = -1; // B·∫Øt ƒë·∫ßu t·ª´ -1, ƒë·ªÉ c·∫•p ƒë·ªô ƒë·∫ßu ti√™n l√† 0

        [Header("‚ù§Ô∏è H·ªá th·ªëng M√°u (Health System)")]
        [Tooltip("L∆∞·ª£ng m√°u t·ªëi ƒëa c·ªßa ng∆∞·ªùi ch∆°i.")]
        [SerializeField] private int maxHealth = 100;
        private int currentHealth;

        [Space(10)]
        [Header("‚ú® Tr·∫°ng th√°i B·∫•t t·ª≠ (Invincibility)")]
        [Tooltip("Th·ªùi gian b·∫•t t·ª≠ (gi√¢y) sau khi nh·∫≠n s√°t th∆∞∆°ng.")]
        [SerializeField] private float invincibilityDuration = 2f;
        public bool IsInvincible { get; private set; }
        private float invincibilityTimer;

        [Space(10)]
        [Header("‚≠ê Ch·ªâ s·ªë Gameplay (Gameplay Stats)")]
        [Tooltip("S·ªë bom kh·ªüi ƒëi·ªÉm c·ªßa ng∆∞·ªùi ch∆°i.")]
        [SerializeField] private int initialBombs = 3;
        [Tooltip("S·ª©c m·∫°nh kh·ªüi ƒëi·ªÉm c·ªßa ng∆∞·ªùi ch∆°i.")]
        [SerializeField] private float initialPower = 1.0f;
        
        [HideInInspector] public int bombs;
        [HideInInspector] public float power;
        [HideInInspector] public long score;

        [Space(15)]
        [Header("üõ†Ô∏è Ch·ª©c nƒÉng G·ª° l·ªói (Debug)")]
        [Tooltip("B·∫≠t ch·∫ø ƒë·ªô n√†y ƒë·ªÉ s·ª≠ d·ª•ng c√°c c√¥ng c·ª• g·ª° l·ªói b√™n d∆∞·ªõi KHI GAME ƒêANG CH·∫†Y.")]
        [SerializeField] private bool debugMode = false;
        
        [Tooltip("Khi game ƒëang ch·∫°y, k√©o m·ªôt ScriptableObject UpgradeData v√†o ƒë√¢y ƒë·ªÉ √°p d·ª•ng ngay. Set v·ªÅ 'None' ƒë·ªÉ quay v·ªÅ tr·∫°ng th√°i c∆° b·∫£n.")]
        [SerializeField] private UpgradeData debugApplyUpgrade;
        private UpgradeData lastAppliedDebugUpgrade;

        // --- Tham chi·∫øu v√† Bi·∫øn n·ªôi b·ªô ---
        private PlayerShooting playerShooting;
        private PlayerSkillManager playerSkillManager;
        private PlayerController playerController;
        private List<UpgradeData> collectedUpgrades = new List<UpgradeData>();
        
        public static event Action OnPlayerDied;

        #region Unity Lifecycle & Setup

        void Awake()
        {
            playerShooting = GetComponent<PlayerShooting>();
            playerSkillManager = GetComponent<PlayerSkillManager>();
            playerController = GetComponent<PlayerController>();
        }

        void Start()
        {
            currentHealth = maxHealth;
            bombs = initialBombs;
            power = initialPower;
            score = 0;
            collectedUpgrades = new List<UpgradeData>();
            ApplyAllUpgrades();
            UpdateAllUI();
        }

        void Update()
        {
            HandleInvincibilityTimer();
            HandleDebugUpgrade();
        }

        #endregion

        #region Skill & Upgrade Logic

        /// <summary>
        /// N√¢ng c·∫•p ng∆∞·ªùi ch∆°i l√™n c·∫•p ƒë·ªô ti·∫øp theo d·ª±a tr√™n Upgrade Path.
        /// ƒê∆∞·ª£c g·ªçi b·ªüi Item.cs khi ng∆∞·ªùi ch∆°i nh·∫∑t v·∫≠t ph·∫©m "Upgrade".
        /// </summary>
        public void LevelUp()
        {
            if (upgradePath == null || upgradePath.upgradeLevels.Count == 0)
            {
                Debug.LogError("Ch∆∞a thi·∫øt l·∫≠p 'Upgrade Path' cho PlayerState!", this);
                return;
            }

            currentUpgradeLevel++;

            if (currentUpgradeLevel >= upgradePath.upgradeLevels.Count)
            {
                currentUpgradeLevel = upgradePath.upgradeLevels.Count - 1;
                Debug.Log("Player ƒë√£ ƒë·∫°t c·∫•p ƒë·ªô t·ªëi ƒëa!");
                return;
            }

            UpgradeData nextUpgrade = upgradePath.upgradeLevels[currentUpgradeLevel];
        
            if (nextUpgrade != null)
            {
            
                // Ch·ªâ th√™m n√¢ng c·∫•p m·ªõi. ApplyAllUpgrades() s·∫Ω t√≠nh to√°n l·∫°i t·∫•t c·∫£.
                AddUpgrade(nextUpgrade); 
                Debug.Log($"Player ƒë√£ l√™n c·∫•p {currentUpgradeLevel}: √Åp d·ª•ng n√¢ng c·∫•p '{nextUpgrade.name}'");
            }
        }

        public void UseInvincibilitySkill()
        {
            if (!HasInvincibilitySkill() || !playerSkillManager.IsSkillReady(PlayerSkillManager.SkillType.Invincibility)) return;

            float duration = 0f;
            foreach (var upgrade in collectedUpgrades)
            {
                if (upgrade.hasInvincibilitySkill && upgrade.invincibilitySkillDuration > duration)
                {
                    duration = upgrade.invincibilitySkillDuration;
                }
            }
            
            SetTemporaryInvincibility(duration);
            playerSkillManager.TriggerCooldown(PlayerSkillManager.SkillType.Invincibility);
            Debug.Log($"ƒê√£ k√≠ch ho·∫°t B·∫•t T·ª≠ trong {duration} gi√¢y!");
        }

        public void AddUpgrade(UpgradeData upgrade)
        {
            if (upgrade == null || collectedUpgrades.Contains(upgrade)) return;
        
            collectedUpgrades.Add(upgrade);
            ApplyAllUpgrades(); // G·ªçi √°p d·ª•ng l·∫°i sau khi th√™m
        }
        
        public void ClearAllUpgrades()
        {
            collectedUpgrades.Clear();
            ApplyAllUpgrades(); // G·ªçi √°p d·ª•ng l·∫°i sau khi x√≥a
        }

        
        public bool HasDashAbility()
        {
            foreach (var upgrade in collectedUpgrades)
                if (upgrade.unlocksDash) return true;
            return false;
        }
        
        public bool HasBulletClearSkill()
        {
            foreach (var upgrade in collectedUpgrades)
                if (upgrade.hasBulletClearSkill) return true;
            return false;
        }

        public bool HasInvincibilitySkill()
        {
            foreach (var upgrade in collectedUpgrades)
                if (upgrade.hasInvincibilitySkill) return true;
            return false;
        }

        public void SetTemporaryInvincibility(float duration)
        {
            IsInvincible = true;
            if (duration > invincibilityTimer)
                invincibilityTimer = duration;
        }
        
        private void ApplyAllUpgrades()
        {
            float totalSpeedMultiplier = 1.0f;
        
            // Reset tr·∫°ng th√°i tr∆∞·ªõc khi √°p d·ª•ng l·∫°i
            bool newDashState = false; 
        
            // T√≠nh to√°n l·∫°i t·∫•t c·∫£ c√°c hi·ªáu ·ª©ng t·ª´ ƒë·∫ßu
            foreach (var upgrade in collectedUpgrades)
            {
                totalSpeedMultiplier *= upgrade.moveSpeedMultiplier;
                if (upgrade.unlocksDash)
                {
                    newDashState = true;
                }
            }
        
            // C·∫≠p nh·∫≠t c√°c component kh√°c
            playerController?.SetSpeedMultiplier(totalSpeedMultiplier);
            playerShooting?.ApplyUpgrades(collectedUpgrades);
        }
        
        private void HandleDebugUpgrade()
        {
            if (!debugMode) return;
            if (debugApplyUpgrade != lastAppliedDebugUpgrade)
            {
                ClearAllUpgrades();
                if (debugApplyUpgrade != null)
                {
                    AddUpgrade(debugApplyUpgrade);
                }
                lastAppliedDebugUpgrade = debugApplyUpgrade;
            }
        }
        #endregion

        #region Gameplay Actions & Handlers
        public void TakeDamage(int damage)
        {
            if (IsInvincible) return;
            currentHealth -= damage;
            if (currentHealth < 0) currentHealth = 0;
            UpdateHealthUI();
            if (currentHealth <= 0)
            {
                GameManager.Instance.PlayerDied();
                Die();
            }
            else StartInvincibility();
        }
        
        public void RestoreFullHealth()
        {
            currentHealth = maxHealth;
            // C·∫≠p nh·∫≠t UI m√°u
        }
        
        public void UseBomb()
        {
            if (bombs > 0 && playerSkillManager != null)
            {
                bombs--;
                playerSkillManager.ActivateBomb();
                UIManager.Instance?.UpdateBombsText(bombs);
            }
        }
        
        private void HandleInvincibilityTimer()
        {
            if (IsInvincible)
            {
                invincibilityTimer -= Time.deltaTime;
                if (invincibilityTimer <= 0) IsInvincible = false;
            }
        }
        
        private void Die()
        {
            OnPlayerDied?.Invoke();
            gameObject.SetActive(false);
        }

        private void StartInvincibility()
        {
            SetTemporaryInvincibility(invincibilityDuration);
        }
        #endregion
        
        #region UI & Data Getters
        private void UpdateHealthUI()
        {
            float healthPercentage = (float)currentHealth / maxHealth;
            UIManager.Instance?.UpdatePlayerHealthBar(healthPercentage);
        }
        
        public void UpdateAllUI()
        {
            UpdateHealthUI();
            UIManager.Instance?.UpdateBombsText(bombs);
            UIManager.Instance?.UpdatePowerText(power);
            UIManager.Instance?.UpdateScoreText(score);
        }
        public void Heal(int amount)
        {
            currentHealth += amount;
            if (currentHealth > maxHealth) currentHealth = maxHealth;
            UpdateHealthUI();
        }
        public void AddScore(long amount)
        {
            score += amount;
            UIManager.Instance?.UpdateScoreText(score);
        }
        public void AddPower(float amount)
        {
            power += amount;
            UIManager.Instance?.UpdatePowerText(power);
            // Kh√¥ng c·∫ßn g·ªçi ApplyAllUpgrades ·ªü ƒë√¢y v√¨ Power kh√¥ng tr·ª±c ti·∫øp thay ƒë·ªïi ki·ªÉu b·∫Øn
        }
        public void AddBomb(int amount)
        {
            bombs += amount;
            UIManager.Instance?.UpdateBombsText(bombs);
        }
        #endregion
    }
}

